source("~/Downloads/power_angeles.R")
getwd()
ls()
dir()
source("~/Downloads/power_angeles.R")
install.packages("Superpower")
library(Superpower)
library(Superpower)
source("~/Downloads/power_angeles.R")
View(result)
source("~/Documents/Curso R/Tarea_Octubre2021.R")
Vector_NA%in%PAAD_Liu
Vector_NA <- c("[Not Evaluated]", "[Unknown]", "[Not Available]","[Discrepancy]")
Vector_NA%in%PAAD_Liu
PAAD_Liu%in%Vector_NA
PAAD_Liu$race%in%Vector_NA
PAAD_Liu=="[Not Evaluated]"
## 2 Importar base de datos ####
DB_Thorsson <- read.xlsx(xlsxFile = "./TAREA/Thorsson.xlsx",sheet = 1)
## 3 Subset del cáncer PAAD: Pancreatic adenocarcinoma ####
PAAD_Thorsson <- subset(DB_Thorsson,subset = (TCGA.Study=="PAAD"))
## 4 Preparar base de datos ####
### a) Agregar columna ####
PAAD_Thorsson$Cancer <- "Pancreatic Adenocarcinoma"
### b) Chequear tipo de variables ####
sapply(PAAD_Thorsson,class)
### c) Variables categóricas ####
#Para transformar a factor :Immune.Subtype, OS, PFI
PAAD_Thorsson[,c(3,33,35)] <- lapply(PAAD_Thorsson[,c(3,33,35)], as.factor)
### d) Eliminar filas que contengan NA en > 50% de las columnas ####
PAAD_Thorsson<-PAAD_Thorsson[!(rowSums(is.na(PAAD_Thorsson)) > 0.5*ncol(PAAD_Thorsson)),]
# Parte 2: ####
## 5 Descargar DB ####
# Uso la misma carpeta que creé en la parte 1
download.file("https://www.cell.com/cms/10.1016/j.cell.2018.02.052/attachment/bbf46a06-1fb0-417a-a259-fd47591180e4/mmc1.xlsx",
"./TAREA/Liu.xlsx")
## 6 Importar DB ####
DB_Liu <- read.xlsx("./TAREA/Liu.xlsx", sheet = 1)
DB_Liu <- DB_Liu[!duplicated(DB_Liu$bcr_patient_barcode),] #Elimina duplicados
## 7 Subset de matchs entre las dos DB ####
PAAD_Liu<-DB_Liu[DB_Liu$bcr_patient_barcode%in%PAAD_Thorsson$TCGA.Participant.Barcode,]
#PAAD_L <- subset(DB_Liu,subset = (type=="PAAD"))
## 8 Preparar base de datos  ####
### a) Calcular edad pacientes ####
PAAD_Liu$edad <- PAAD_Liu$birth_days_to/-365.25
### b) Chequear tipo de variables ####
sapply(PAAD_Liu, class)
### d) Formatear NAs (ojalá supiera usar un FOR :P) ####
values <- lapply(PAAD_Liu,unique)
Vector_NA <- c("[Not Evaluated]", "[Unknown]", "[Not Available]","[Discrepancy]")
PAAD_Liu[PAAD_Liu=="[Not Evaluated]"]
PAAD_Liu[PAAD_Liu=="[Not Evaluated]"]
source("~/Documents/GitHub/Striatocortical-connectivity-FEPtrt/LongitudinalPLOT/Longitudinalplot_cleansample.R")
ggplot(organized_df, aes(x = t_DIT)) +
geom_line(aes(y=ID, group = ID ), size = .3) +
geom_point(aes(y=ID, color = as.factor(group),shape = factor(ses)), size=2) +
labs(x = "Duration of treatment (months)", y = "Subject ID", color = "Group", shape= "Session") +
theme(legend.position = "top", axis.text.y = element_text(size = 5)) +
geom_density(aes(y = -..density..*500), fill= "#69b3a2") +
geom_label(aes(x=75, y=-10, label="density")) +
scale_x_continuous(breaks = c(specific_ticks, 0, 25, 50, 75, 100),
labels = c(specific_labels, 0, 25, 50, 75, 100)) +
geom_text(aes(x=12, y=-20, label="1y"), size=3) +
geom_text(aes(x=12*2, y=-20, label="2y"), size=3) +
geom_text(aes(x=12*4, y=-20, label="4y"), size=3) +
geom_text(aes(x=12*6, y=-20, label="6y"), size=3) +
geom_text(aes(x=12*7, y=-20, label="7y"), size=3)
View(df)
View(df)
View(organized_df)
sum(df$group=="HC")
sum(df$group=="HC" & df$ses== 01)
View(df)
sum(df$group=="HC" & df$ses== 1)
sum(df$group=="HC" & df$ses== 2)
sum(df$group=="HC" & df$ses== 3)
sum(df$group=="HC" & df$ses== 4)
sum(df$group!="HC" & df$ses== 1)
sum(df$group!="HC")
range(df$t_DIT[df$group!="HC"])
80.82/12
sum(df$group=="nonTRS" & df$ses== 1)
sum(df$group=="TRS" & df$ses== 1)
range(df$t_DIT[df$group=="HC"])
53/12
4/59
4/59 * 100
30/85 ¡ 100
30/85 * 100
33 + 18
51/85
View(df)
sum(df$group=="TRS" & df$sex=="Masculino")
sum(df$group=="nonTRS" & df$sex=="Masculino")
sum(df$group=="nonTRS" & df$sex=="Masculino" & df$ses==1)
sum(df$group=="TRS" & df$sex=="Masculino" & df$ses==1)
sum(df$group=="HC" & df$sex=="Masculino" & df$ses==1)
76/118
46/55
23/30
contingency_table <- table(df$group[df$ses==1], df$sex[df$ses==1])
print(contingency_table)
chi_square_test <- chisq.test(contingency_table)
print chi_square_test
print(chi_square_test)
mean(df$age[df$group=="TRS" & df$ses==1])
sd(df$age[df$group=="TRS" & df$ses==1])
mean(df$age[df$group=="nonTRS" & df$ses==1])
sd(df$age[df$group=="nonTRS" & df$ses==1])
mean(df$age[df$group=="HC" & df$ses==1])
sd(df$age[df$group=="HC" & df$ses==1])
shapiro_test_HC <- shapiro.test(df$age[df$group == "HC" & df$ses==1])
shapiro_test_TRS <- shapiro.test(df$age[df$group == "TRS"  & df$ses==1])
shapiro_test_nonTRS <- shapiro.test(df$age[df$group == "nonTRS"  & df$ses==1])
print (shapiro_test_HC)
print (shapiro_test_TRS)
print (shapiro_test_nonTRS)
kruskal_test <- kruskal.test(age ~ group, data = df[df$ses==1])
baseline_df = df[df$ses==1,]
kruskal_test <- kruskal.test(age ~ group, data = df[df$ses==1, ])
print(kruskal_test)
pairwise_comparisons <- pairwise.wilcox.test(baseline_df$age, baseline_df$group, p.adjust.method = "bonferroni")
print(pairwise_comparisons)
pairwise_comparisons <- pairwise.wilcox.test(baseline_df$age, baseline_df$group)
print(pairwise_comparisons)
df_fup <- df %>%
group_by(subject_id, group) %>%
summarise(has_follow_up = n() > 1) %>%
ungroup()
df_fup <- df %>%
group_by(ID, group) %>%
summarise(has_follow_up = n() > 1) %>%
ungroup()
print(df_fup)
contingency_table <- table(df_fup$group, df_fup$has_follow_up)
print(contingency_table)
sum(df$group=="HC" & df$group == 2)
sum(df$group=="HC" & df$ses == 2)
sum(df$group=="HC" & df$ses == 1)
sum(df$group=="TRS" & df$ses == 2)
sum(df$group=="TRS" & df$ses == 3)
sum(df$group=="TRS" & df$ses == 4)
sum(df$group=="TRS" & df$ses == 5)
18 + 9 + 4
View(df_fup)
chi_square_test <- chisq.test(contingency_table)
print(chi_square_test)
60 + 58
58/118 * 100
print(contingency_table)
33 / (33+24)
33 +24
12 + 18
count(unique(df$ID))
unique(df$ID)
a = unique(df$ID)
205 - 118 + 30
205 - 118 - 30
ids_with_ses_2_or_higher <- df %>%
filter(ses >= 2) %>%
pull(subject_id) %>%
unique()
ids_with_ses_2_or_higher <- df %>%
filter(ses >= 2) %>%
pull(ID) %>%
unique()
ids_with_ses_1 <- df %>%
filter(ses == 1) %>%
pull(subject_id) %>%
unique()
ids_with_ses_1 <- df %>%
filter(ses == 1) %>%
pull(ID) %>%
unique()
# Exclude IDs with ses = 1
ids_without_ses_1 <- setdiff(ids_with_ses_2_or_higher, ids_with_ses_1)
# Print the result
print(ids_without_ses_1)
